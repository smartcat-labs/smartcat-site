@using Vega.USiteBuilder;
@using SmartCat.Entities.DocumentTypes;
@using System.Text.RegularExpressions;
@using SmartCat.Business.Helpers;
@using SmartCat.Entities.DocumentTypes.Repository;

@inherits Vega.USiteBuilder.UmbracoTemplatePageBase<SmartCat.Entities.DocumentTypes.Blog>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    ViewBag.Title = string.IsNullOrEmpty(Model.Title) ? Model.Name : Model.Title;

    ViewBag.SeoDescription = Model.SeoDescription;
    ViewBag.SeoKeywords = Model.SeoKeywords;
    ViewBag.SeoAuthor = Model.SeoAuthor;
}

@section additionalHeaderSection
{

}


<div class="page-title">
    <div class="wrapper">
        <h1>@Model.Name</h1>
    </div>
</div>

<div class="content">

    @{
        var selectedTag = Request.QueryString["tag"];
        var searchText = Request.QueryString["search"];

        var blogPosts = new List<BlogPost>();

        if (!string.IsNullOrEmpty(selectedTag) && !string.IsNullOrEmpty(searchText))
        {
            blogPosts = ContentHelper.GetChildren<BlogPost>(Model.Id).Where(x => x.BlogTags != null && x.BlogTags.Contains(Convert.ToInt32(selectedTag)) && x.BlogTitle.ToLower().Contains(searchText.ToLower())).ToList();
        }
        else if (!string.IsNullOrEmpty(selectedTag))
        {
            blogPosts = ContentHelper.GetChildren<BlogPost>(Model.Id).Where(x => x.BlogTags != null && x.BlogTags.Contains(Convert.ToInt32(selectedTag))).ToList();
        }
        else if (!string.IsNullOrEmpty(searchText))
        {
            blogPosts = ContentHelper.GetChildren<BlogPost>(Model.Id).Where(x => x.BlogTitle.ToLower().Contains(searchText.ToLower())).ToList();
        }
        else
        {
            blogPosts = ContentHelper.GetChildren<BlogPost>(Model.Id).ToList();
        }

    }

    <div class="wrapper centered">
        <div class="blog-landing">
            <form name="blogForm" id="blogForm" action="@Umbraco.AssignedContentItem.Url" method="get">
                <div class="filter-wrapper">
                    @if (NodeHelper.Settings.TagsContainer.HasValue)
                    {
                        var blogTags = ContentHelper.GetChildren<TagItem>(NodeHelper.Settings.TagsContainer.Value);

                        if (blogTags != null && blogTags.Any())
                        {
                            <div class="item">
                                <select name="tag" id="tag">
                                    <option value="">Select Tag</option>
                                    @foreach (var tag in blogTags)
                                    {
                                        <option @(tag.Id.ToString() == selectedTag ? "selected" : string.Empty) value="@tag.Id">@tag.Name</option>
                                    }
                                </select>
                            </div>
                        }
                    }
                    <div class="item">
                        <div class="search-filter">
                            <input name="search" id="search" type="text" placeholder="Search" value="@searchText" />
                            <a href="javascript:;" onclick="$('#blogForm').submit();">Search</a>
                        </div>
                    </div>
                </div>
            </form>

            @if (blogPosts != null && blogPosts.Any())
            {
                blogPosts = blogPosts.OrderByDescending(x => x.PostDate).ToList();

                <div class="blog-inner-wrap">

                    @foreach (var post in blogPosts)
                    {
                        var postIndex = blogPosts.IndexOf(post);
                        var postClass = string.Empty;
                        var spanClass = string.Empty;
                        var postClasses = new string[3] { "vertical", "right", "" };

                        switch (postIndex)
                        {
                            case 0:
                                postClass = "stamp";
                                spanClass = "ribbon";
                                break;

                            default:
                                postClass = postClasses.RandomOrder().First();
                                spanClass = "arrow";
                                break;
                        }

                        <a href="@post.NiceUrl">
                            <div class="item @postClass">
                                <div class="img-wrap">
                                    <img src="@Umbraco.TypedContent(post.Id).GetCropUrl(SmartCat.Common.Constants.Media.CropNames.BlogHeaderImageAlias, SmartCat.Common.Constants.Media.CropNames.Box)" alt="" />
                                    <span class="color-overlay"></span>
                                    <span class="blue-overlay"></span>
                                    <span class="read-more"><i></i></span>
                                    <span class="@spanClass"></span>
                                </div>
                                @if (postClass == "stamp")
                                {
                                    <div class="text hidden-on-mobile">
                                        <h3><span>@post.BlogTitle</span></h3>
                                        <span class="date">@post.PostDate.ToString("MM/dd/yy")</span>
                                    </div>
                                }
                                <div class="text @(postClass == "stamp" ? "show-on-mobile" : string.Empty)">
                                    <span class="date">@post.PostDate.ToString("MM/dd/yy")</span>
                                    <h3>@post.BlogTitle</h3>
                                    @if (postClass != "stamp")
                                    {
                                        <p>
                                            @Regex.Replace(post.RteContent, @"<(.|\n)*?>", string.Empty).Substring(0, 80) ...
                                        </p>
                                    }
                                    @{
                                        var postAuthor = post.Author.HasValue ? ContentHelper.GetByNodeId<TeamMember>(post.Author.Value) : null;
                                    }
                                    @if (postAuthor != null)
                                    {
                                        <span class="author">
                                            By @postAuthor.FirstName @postAuthor.LastName
                                        </span>
                                    }

                                </div>
                            </div>
                        </a>
                    }
                </div>
            }
            else
            {
               <h2>No results, please refine your search criteria.</h2>
            }
        </div>
    </div>
</div>


@section additionalFooterSection
{
    <script type="text/javascript" src="/scripts/libs/jquery.stylish-select.min.js"></script>
    <script type="text/javascript" src="/scripts/libs/masonry.pkgd.min.js"></script>
    <script type="text/javascript" src="/scripts/pages/blog.js"></script>
}